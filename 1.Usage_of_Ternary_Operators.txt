01. Explain the usage of ternary operator with syntax and write a program to check the number is even or odd using the ternary operator.

Ans.:- 
	The ternary operator is a concise way to perform conditional operations. It evaluates a condition and returns one of two values based on whether the 		condition is true or false.

 	SYNTAX

	condition ? expressionIfTrue : expressionIfFalse

	- condition: 		This is the expression that gets evaluated. It should return a boolean value (`true` or `false`).
	- expressionIfTrue: 	This is the expression that gets executed if the condition is `true`.
	- expressionIfFalse: 	This is the expression that gets executed if the condition is `false`.

	Example Usage

	Basic Example

	Let's look at a basic example to understand how it works.

	let age = 20;
	let isAdult = age >= 18 ? "Yes, an adult" : "No, not an adult";
	console.log(isAdult); // Output: "Yes, an adult"

	In this example:
	- `age >= 18` is the condition.
	- If `age` is greater than or equal to 18, the expression `"Yes, an adult"` is executed and assigned to `isAdult`.
	- If `age` is less than 18, the expression `"No, not an adult"` is executed and assigned to `isAdult`.

	NESTED TERNARY OPERATORS

	Ternary operators can also be nested, although this can sometimes make the code harder to read. Hereâ€™s an example of a nested ternary operator:

	let score = 85;
	let grade = score >= 90 ? "A" : score >= 80 ? "B" : score >= 70 ? "C" : score >= 60 ? "D" : "F";
	console.log(grade); // Output: "B"
	
	In this example:
	- The condition `score >= 90` is checked first. If `true`, `grade` is set to `"A"`.
	- If `false`, it checks `score >= 80`. If `true`, `grade` is set to `"B"`, and so on.
	- This continues until the correct grade is assigned based on the `score`.

	TERNARY OPERATOR IN FUNCTION

	The ternary operator can also be used in functions to return different values based on a condition.

	function getFee(isMember) {
	  return isMember ? "2.00" : "10.00";
	}

	console.log(getFee(true));  // Output: "2.00"
	console.log(getFee(false)); // Output: "10.00"

	In this function:
	- If `isMember` is `true`, the function returns `"2.00"`.
	- If `isMember` is `false`, the function returns `"10.00"`.

	Advantages

	- Concise: The ternary operator allows for a more concise way to write simple conditional statements compared to `if-else`.
	- Readability: For straightforward conditions, it can make the code more readable.

	Disadvantages
	
	- Complexity: When overused or nested, ternary operators can make the code difficult to read and maintain.
	- Debugging: Debugging nested ternary operators can be challenging, especially with complex conditions.

	CONCLUSION

	The ternary operator is a powerful tool for writing concise conditional statements in JavaScript. Use it for simple conditions to improve readability, but 		avoid overuse or complex nesting to maintain clarity in your code.