2.Describe the usage of the comma operator in Javascript and provide an example.

Ans.:- 
	The comma operator in JavaScript is used to evaluate multiple expressions, from left to right, and returns the value of the last expression. It's often used to 	include multiple expressions in a place where only one is expected, such as in a for loop or within a return statement.

	Syntax
	expression1, expression2, ..., expression
	

	Each expression is evaluated in order, but only the value of the last expression is returned.

	Example Usage

	Basic Example

	Let's look at a basic example to understand how it works.

	javascript
	let x = 10;
	let y = (x++, x + 1);
	console.log(x); // Output: 11
	console.log(y); // Output: 12
	

	In this example:
	- x++ increments x by 1 but returns the value before incrementing, which is 10.
	- x + 1 calculates the new value of x (which is now 11) plus 1, resulting in 12.
	- y is assigned the value 12, which is the result of the last expression.
	
	USING THE COMMA OPERATOR IN A FOR LOOP

	The comma operator is often used in for loops to include multiple expressions in the loop header.

	javascript
	for (let i = 0, j = 10; i < j; i++, j--) {
	  console.log(i: ${i}, j: ${j});
	}
	// Output:
	// i: 0, j: 10
	// i: 1, j: 9
	// i: 2, j: 8
	// i: 3, j: 7
	// i: 4, j: 6
	

	In this example:
	- The initialization part of the for loop (let i = 0, j = 10) initializes two variables i and j.
	- The update part (i++, j--) increments i and decrements j on each iteration of the loop.

	USING THE COMMA OPERATOR IN RETURN STATEMENTS

	The comma operator can also be used in return statements to execute multiple expressions before returning a value.

	function example() {
	  let x = 5;
	  return (x += 2, x * 2);
	}

	console.log(example()); // Output: 14
	
	In this example:
	- x += 2 increments x by 2, making it 7.
	- x * 2 calculates the new value of x (which is 7) multiplied by 2, resulting in 14.
	- The function returns 14, which is the result of the last expression.

	CONCLUSION

	The comma operator in JavaScript allows multiple expressions to be evaluated in a single statement, returning the value of the last expression. It can be 	useful in specific scenarios such as for loops or concise return statements. However, its usage can sometimes reduce code readability, so it should be used 	judiciously.